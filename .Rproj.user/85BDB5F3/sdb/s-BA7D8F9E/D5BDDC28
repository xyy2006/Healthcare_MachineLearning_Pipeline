{
    "contents" : "#!/usr/bin/env Rscript\n## !/usr/bin/Rscript --vanilla\n##!/cadappl/R/3.1.0/lib64/R/bin/Rscript --vanilla --slave\n# Content: setting up the env for parallel computing and every variables needed for further computation using a specified statistical model/module.\n# Author: Yang Yang\n# Date:\"Tue Jul  1 08:57:26 2014\"\n# Usage: executable.r -h\n# Note: To run this program, you need at least prepare the input Rdata put under ./ (with all response variables and covariates, a big matrix-like object), factor_details.txt file (put under ./Factors_details_file/), and optionally the MultipleNodes_profile.txt put under ./Main_file/. Filenames can be any, as you can specify in below cmd line arguments.\n\n# example:\n# ---full run--- #\n#\t\t./ModelComputation_main -i NY_SID_2009_HFdata_refined.Rdata -F factor_details_forLM.txt -f uniCorr -p RSForest -c uniCorr_model.txt -e RSForest_model.txt -o RSForest -P SNOW -j FALSE\n# ---demo run on single node--- #\n#\t\t./ModelComputation_main -i NY_SID_2009_HFdata_refined_subsetDemo.Rdata -F factor_details_forLM.txt -f uniCorr -p RSForest -c uniCorr_model.txt -e RSForest_model.txt -o RSForest -P SNOW -j FALSE\n# ---demo run on multiple nodes--- #\n#\t\t./ModelComputation_main -i NY_SID_2009_HFdata_refined_subsetDemo.Rdata -F factor_details_forLM.txt -f uniCorr -p RSForest -c uniCorr_model.txt -e RSForest_model.txt -o RSForest -P SNOW -j T -m MultipleNodes_profile.txt\n# ---demo run on multiple nodes for grpreg model.--- #\n#\t\t./ModelComputation_main -i NY_SID_2009_HFdata_refined_subsetDemo.Rdata -F factor_details_forLM.txt -f uniCorr -p grpreg_linearGroupRegularized -c uniCorr_model.txt -e grpreg_linearGroupRegularized_model.txt -o grpreg -P SNOW -j FALSE\n# ---demo run on multiple nodes for glmnet model.--- #\n#\t\t./ModelComputation_main -i NY_SID_2009_HFdata_refined_subsetDemo.Rdata -F factor_details_forLM.txt -f uniCorr -p glmnet_linearRegularized -c uniCorr_model.txt -e glmnet_linearRegularized_model.txt -o glmnet -P SNOW -j T -m MultipleNodes_profile.txt\n# ---demo run on multiple nodes for Survival_glmnet model.--- #\n#\t\t./ModelComputation_main -i NY_SID_2009_HFdata_refined_subsetDemo.Rdata -F factor_details_forLM.txt -f uniCorr -p Survival_glmnet -c uniCorr_model.txt -e Survival_glmnet_model.txt -o Survival_glmnet -P SNOW -j T -m MultipleNodes_profile.txt\n#####################################################################################\nsuppressPackageStartupMessages(require(getopt)) # load necessary packages\n# 0, require no args; 1, require args; 2, optional, require args.\nspec = matrix(c(\n  'verbose', 'v', 0, \"logical\",\"display verbose message printed\",\n  'help'   , 'h', 0, \"logical\",\"call 'help' document\",\n  'input_file'  , 'i', 1, \"character\",\"the data you want to run program on, must be one of .Rdata, .RDS, .text, .txt, .cvs)\",\n  'i_f_delim','d',2,'character',\"[optional] if you provide text input rather than R binary data, specify the delimiter, current support either [t] or [,] (please not include the square parentheses). [t]: tab delimited; [,]: comma delimited. If you dont specify, program will decide automatically, which may not be correct.\",\n  'output_folder_name','O',2,'character',\"[optional] if you provide the output folder name, there will be a new folder, e.g. './new_folder', made for output files; otherwise, output will go to default folder './Output_file'. Note: log file is always put under program root pwd for convenience.\",\n  'factors_details_file', 'F', 1, \"character\",\"a filename put in the same folder as program, which contains columns (delimited by comma/tab/space) like this (for details check example file): \\n \\t\\t\\t\\t\\t\\tage, knowledge, continuous\\n \\t\\t\\t\\t\\t\\tgender, knowledge, categorical\\n \\t\\t\\t\\t\\t\\tDXCCS1, data, categorical\\n \\t\\t\\t\\t\\t\\tNDX, data, continuous\",\n  'PrefeatureSelection_module','f',2,'character','[optional] which statistical model/module you want to use for feature selection. It must be one from infoGain,LAR,fisherScore,uniCorr,etc.',\n  'Predictive_module','p',1,'character','which statistical model/module you want to use for prediction. It must be one from linearModelStepwise, RSForest,etc.',\n  'Pf_m_config_file','c',2,'character','the configuration filename for PrefeatureSelection_module you choose, within which you can tune arguments for that specified module. If omitted, use defaults',\n  'p_m_config_file','e',2,'character','the configuration filename for Predictive_module you choose, within which you can tune arguments for that specified module. If omitted, use defaults',\n  'prefix', 'o', 1, \"character\",\"the prefix you want to add to any output file names, e.g. 'Prefix123_regressionOBJ.Rdata'\",\n  'parallel_scheme', 'P', 1, \"character\",\"current support: 'SERIAL','SNOW' or 'MC'. 'SERIAL' forces run in serial (e.g. it is important to use 'SERIAL' when migrate the code to hadoop system, etc.)\",\n  'jobExecuteOnMultipleNodes', 'j', 1, \"logical\",\"'TRUE' or 'FALSE' (with 'TRUE' means parallel run on multiple nodes (force use 'SNOW'), which are more complicated and need pre-configuration of the cluster environment. You may need to consult the cluster administrator before you do that way.)\",\n  'MultipleNodes_profile','m',2,'character',\"This options comes together with 'jobExecuteOnMultipleNodes'==TRUE. The file contains the configuration for the virture cluster with multiple nodes you intent to use. Check the example file.\",\n  'kFoldCV','k',2,'integer',\"By specifying 'k', you enable manual CV in the pipeline for pre-feature selection module and predictive module. 'k' is a integer representing k in k-fold cross validation. For example, use k = 5 will split the data into 5 bins with each time using 4 bins for training, 1 bins for validating purpose. Some predictive module has within-package kFoldCV/or OOB algorithm, e.g. RSForest, glmnet/ncvreg/grpreg-based modules, etc. Therefore, avoiding enabling this option in such cases.\",\n  'ProportionHoldingTestDataset','H',2,'double',\"a proportion value indicating how much data you want to pre-hold for testing dataset, e.g. 0.3 means 30% of the total dataset will be kept out solely for testing purpose, then 70% dataset will be used for training or k-fold CV training.\",\n  'seed','s',2,'integer',\"since sampling/splitting the data into training/validation/testing data portion is by random sampling, giving a seed will make the split deterministic, i.e. same seed will lead to same data split.\"\n), byrow=TRUE, ncol=5)\n# 'response_variables', 'y', 1, \"character\",\"colnames delimited by comma/tab/space. E.g., LOS.x,DEATH\",\n#'knowledge_driven_factors'  , 'K', 1, \"character\",\"colnames delimited by comma/tab/space. E.g., AGE,GENDER,WEIGHT\",\n#'data_driven_factors', 'D', 1, \"character\",\"colnames delimited by comma/tab/space. E.g., PRCCS3, PRCCS4, PRCCS5\",\n\nopt = getopt(spec);\nprint(opt)\n# if help was asked for print a friendly message\n# and exit with a non-zero error code\nif ( length(opt) == 1 | !is.null(opt$help) ) { # conditions call 'help'\n  cat(getopt(spec, usage=TRUE));\n  suppressPackageStartupMessages( invisible(source( sprintf(\"./Main_file/extract_moduleList_from_ModulesCatalog.r\") ) ) )\t\n  Modules_Catalog_file <- \"./Module_file/Modules_Catalog.txt\"\n  message(\"#====================================================#\")\n  message(\"Current available algorithms for:\")\n  algorithmListForModules <- extract_moduleList_from_ModulesCatalog(Modules_Catalog_file)\t# will print current available algorithms for each module.\n  q(status=1);\n}\n\n# #####################################\n# ## for debugging purpose, manually assigning values to the specs above.\n# input_file <- \"NY_SID_2009_HFdata_refined.Rdata\"\t# later we can do format-adaptive loadin\n# input_file_delimiter <- NULL\n# featureSelection_module <- \"uniCorr\"\n# predictive_module <- \"RSForest\"\n# Pf_m_config_file <- \"Rscript/uniCorr_model.txt\"\n# p_m_config_file <- \"Rscript/RSForest_model.txt\"\n# response_variables <- c(\"LOS.x\",\"died\")\n# factors_details_file <- \"factor_details_forLM.txt\"\n# parallel_scheme <- \"MC\"\n# jobExecuteOnMultipleNodes <- \"FALSE\"\n# MultipleNodes_profile <- \"MultipleNodes_profile.txt\"\n# kFoldCV <- 5\n# ProportionHoldingTestDataset <- 0.3\n# seed = 123\n# #####################################\n#set some reasonable defaults for the options that are needed,\n#but were not specified.\n# if ( is.null(opt$mean    ) ) { opt$mean    = 0     }\n# if ( is.null(opt$sd      ) ) { opt$sd      = 1     }\n# if ( is.null(opt$count   ) ) { opt$count   = 10    }\n# if ( is.null(opt$verbose ) ) { opt$verbose = FALSE }\n#print some progress messages to stderr, if requested.\nif ( !is.null(opt$verbose) ) { write(\"Parsing commands...\",stdout()); }\n#\nfor(i in 1:length(opt))  {\n  assign(names(opt)[i],opt[[i]]) # assign opt member obj into .GlobalEnv for later call usage.\n}\n#---------#\n# set option to allow error dumpping. The dumping error file will always show up in user specified output folder after error occurs.\nprogramRootPWD <-  getwd() \t# for later usage of root path.\ninvisible( ifelse(exists(\"output_folder_name\"), yes = {dir.create(output_folder_name);setwd(output_folder_name)}, no = {dir.create(\"Output_file\");setwd(\"Output_file\")} ) )\t# dont print the pwd which is the default behaviour of setwd.\noutputPWD <- getwd()\t# now program are already at outputPWD.\n#\nif ( exists(\"prefix\") ) {\n  options(error = quote({\n    message(\"========================================================\" );\n    message(\"Please check log file under program root and error dump file in\", outputPWD );\n    dump.frames(dumpto = sprintf(\"%s/%s.last.dump\",outputPWD,prefix),to.file = TRUE); \n    # file.show(sprintf(\"%s/%s_riskModelling.log\",programRootPWD,prefix));  # alternatively, show the file bay Bash shell cmd after R exit.\n    q()}))\t# for debugging purpose, will output a file \"$prefix.last.dump.rda\" for further debugging if error occured.\n} else \t{\n  prefix <- \"Default\"\t# give the default value.\n  options(error = quote({\n    message(\"========================================================\" );\n    message(\"Please check log file under program root and error dump file in\", outputPWD );\n    dump.frames(dumpto = sprintf(\"%s/%s.last.dump\",outputPWD,prefix),to.file = TRUE); \n    # file.show(sprintf(\"%s/%s_riskModelling.log\",programRootPWD,prefix));\n    q()}))\t# for debugging purpose, will output a file \"last.dump.rda\" for further debugging if error occured.\n}\n#---#\n# transforming jobExecuteOnMultipleNodes to another variable of class \"logical\".\nif ( grepl(\"^T\",jobExecuteOnMultipleNodes,perl=T,ig=T) ) jEOM <- T else if ( grepl(\"^F\",jobExecuteOnMultipleNodes,perl=T,ig=T) ) jEOM = F else {    \n  cat(getopt(spec, usage=TRUE));\n  cat('========================================================\\n')\n  stop(\"Something wrong with parallel_scheme appointment!\")\n  q(status=1);\n}\n\n\n\n\n#===================================================================================#\n# start logging.\nlog_connection <- file(sprintf(\"%s/%s_riskModelling.log\",programRootPWD,prefix), open = \"wt\")\t# log file always put under './' deliberately (it's convenient after you run the program, you dont need to change folder to look at the log file.)\nsink(log_connection, type=\"output\",split = TRUE)\n# sink(log_connection, type=\"message\",split = FALSE)\t# cannot split, so prefer print on screen for the errors.\n# on.exit( catt(geterrmessage()) )\t# only used in function.\ncat(\"Start at \", date(),\"\\n\" )\ncat(\"parallel_scheme choice is:\",parallel_scheme,\"\\n\")\n# the example we use is\ncat(\"=====================================================\\n\")\nsuppressPackageStartupMessages( invisible(source( sprintf(\"%s/Main_file/head.r\",programRootPWD) ) ) )\t# the head import\nsuppressPackageStartupMessages( invisible(source(sprintf(\"%s/Main_file/extract_model_fromModelFile.r\",programRootPWD) ) ) )\t# the extract_model from model_file.\n# suppressPackageStartupMessages( invisible(source(\"extract_model_fromModelFile.r\") ) )\t\n# setwd(\"/home/310166442/HCUP_data\")\n# strsplit(knowledge_driven_factors,split=c(\",\",\"\\\\s\") ,perl=T)\n# strsplit(data_driven_factors,split=c(\",\",\".\") ,perl=T)\n# #----------------setting up the parallel env------------------------#\n###::: use \"SparkR\" env instead of HPC parallel protocols\nsource(sprintf(\"%s/setting_up_sparkR_env.r\", programRootPWD) )# so we have 'sc' as spark-cluster.\n\n# # ---a subfunc to setup the parallel env---#\n# setParallel <- function(parallel_scheme = parallel_scheme){\n#   switch(parallel_scheme,\n#          MC = registerDoMC(detectCores()),\n#          SNOW = {cl <<- makeSOCKcluster(detectCores())\t# make it mutable object.\n#          setDefaultCluster(cl)\n#          registerDoSNOW(cl)\n#          #---need to send the path and point to the correct path on each slave node---\n#          clusterExport(cl, \"programRootPWD\")\n#          clusterEvalQ(cl,source( sprintf('%s/Main_file/head_forNonInteractive_SlaveNodes.r',programRootPWD) )) # load necessary packages on each, slave must be given absolute path, REMEBER!\n#          # on.exit({stopCluster(cl)})\t# turn if off savely, not put here, otherwise generate -> kill immediately.\n#          },\n#          SERIAL = registerDoSEQ() ,\n#          stop(\"Not valid parallel_scheme appointed!\")\n#   )\n#   #\n#   catt(\"We have registered \",getDoParWorkers(),\" cpu(s) on machine: \",system(\"hostname\",intern=T), \" by \", shQuote(getDoParName()) )\n# }\n# #-------#\n# if (!jEOM) {\n#   setParallel(parallel_scheme)\n#   on.exit({stopCluster(cl)})\n# } else if (jEOM && exists(\"MultipleNodes_profile\") ) {\n#   m_n_profile <- read.table(sprintf(\"%s/Main_file/%s\",programRootPWD,MultipleNodes_profile),header=T)\n#   nodes_file <- unlist( apply(m_n_profile, 1, function(x) rep(x['nodeName'],x['cpus'])) )\t# the cpus pool.\n#   cl <- makeSOCKcluster(nodes_file)\n#   setDefaultCluster(cl)\n#   registerDoSNOW(cl)\n#   #---need to send the path and point to the correct path on each slave node---\n#   clusterExport(cl, \"programRootPWD\")\n#   clusterEvalQ(cl,source( sprintf('%s/Main_file/head_forNonInteractive_SlaveNodes.r',programRootPWD) )) # load necessary packages on each, slave must be given absolute path, REMEBER!\n#   on.exit({stopCluster(cl)})\t# turn if off savely.\n#   catt(\"We have registered \",getDoParWorkers(),\" cpu(s) by \", shQuote(getDoParName()), \"on machine: \" )\n#   print(m_n_profile)\n# } else\t{\n#   setParallel(parallel_scheme)\t# still run on single node.\n#   on.exit({stopCluster(cl)})\n# }\n# # clusterEvalQ(cl,Sys.info()['nodename'])\n# # # not yet executed\n# # # clusterEvalQ(cl,ls())\t# for debugging purpose.\n# catt(\"Again now we have \",getDoParWorkers(),  \" cores running!\")\n\n# catt( unlist(clusterEvalQ(cl,Sys.info()['nodename'])) )\t# for debugging purpose.\n# #--------extract the variables we need for predictors from input----------------------#\n# m<-gregexpr(\",|\\\\s+\",response_variables,perl=T)\n# response_variables_vec <- unlist(regmatches(response_variables,m,invert=T) ) \n# #\n# m<-gregexpr(\",|\\\\s+\",knowledge_driven_factors,perl=T)\n# knowledge_driven_factors_vec <- unlist(regmatches(knowledge_driven_factors,m,invert=T) ) \n# #\n# m<-gregexpr(\",|\\\\s+\",data_driven_factors,perl=T)\n# data_driven_factors_vec <- unlist(regmatches(data_driven_factors,m,invert=T) )\n# #---a sub func to exclude those like \"\"------#\n# eliminate_nchar0 <- function(x) nchar(x)!=0\n# #---#\n# response_variables_vec <- response_variables_vec[sapply(response_variables_vec,eliminate_nchar0)]\n# knowledge_driven_factors_vec <- knowledge_driven_factors_vec[ sapply(knowledge_driven_factors_vec,eliminate_nchar0)]\n# data_driven_factors_vec <- data_driven_factors_vec[ sapply(data_driven_factors_vec,eliminate_nchar0)]\n#--------------setting up the data for computing on-------------------------#\ncatt(\"Start loading input_file!\")\nsuffix <- sub((\".+?\\\\.(\\\\w+$)\"),\"\\\\1\",input_file,perl=T) %>>% tolower\nif (exists(\"i_f_delim\") ) {\t# normalize the file delimiter.\n  i_f_delim <- switch(i_f_delim,\n                      `t` = '\\t',\n                      `,` = ',',\n                      stop(\"Please check the supported delimiter in program helper!\")\n  )\n}\n#---switch how to load input data---#\nswitch(suffix,\n       txt = { data_input <- fread( sprintf(\"%s/%s\",programRootPWD,input_file),header = TRUE, sep = ifelse(exists(\"i_f_delim\"), yes = i_f_delim, no = \"auto\") )},\n       \n       csv = { data_input <- fread( sprintf(\"%s/%s\",programRootPWD,input_file),header = TRUE, sep = ifelse(exists(\"i_f_delim\"), yes = i_f_delim, no = \"auto\") )},\n       \n       text = { data_input <- fread( sprintf(\"%s/%s\",programRootPWD,input_file),header = TRUE, sep = ifelse(exists(\"i_f_delim\"), yes = i_f_delim, no = \"auto\") )},\n       \n       rds = {\n         data_input <- readRDS( sprintf(\"%s/%s\",programRootPWD,input_file) )\n       },\n       \n       rdata = {\n         temp_load <- load( sprintf(\"%s/%s\",programRootPWD,input_file) )\n         data_input <- eval(as.name(temp_load))\n       },\n       \n       stop( sprintf(\"Please provide a valid input format for '%s' with txt/csv/text/Rdata suffix accordingly!\", input_file) )\t# currently report error for all other suffix.\n)\nif (!inherits(data_input,\"data.table\")) data_input <- as.data.table(data_input)\t# data.table package is a must.\n# a DT and DF object.\n# data_input[,sapply(.SD,function(x) sum(is.na(x)))]\n#---------------------------------------------------------------------------#\n#read the factor file in\ncatt(\"Start factors_details_file!\")\n# factors_all <- fread(factors_details_file,skip=4)\t# skip=4, can vary to skip comments.\nfactors_all <- fread(sprintf(\"%s/Factors_details_file/%s\",programRootPWD,factors_details_file),skip=4)\t# skip=4, can vary to skip comments.\nfactors_all <- factors_all[grep(\"no\",includedInAnalysis,perl=T,ignore=T,invert=T),]\nfactors_all$drivenType = tolower(factors_all$drivenType)\t# compatiblity.\nfactors_all$dataType = tolower(factors_all$dataType)\n\n# factors_all[,sapply(.SD,class)]\n# colname         drivenType           dataType includedInAnalysis\n# \"character\"        \"character\"        \"character\"        \"character\"\n# comment\n# \"character\"\n#\n# > factors_all\n# colname drivenType    dataType includedInAnalysis\n# 1:                ICD-9-CM.15       data  continuous                 no\n# 2:                      CC.15       data categorical\n# 3:                ICD-9-CM.14       data categorical                 no\n# 4:                      CC.14       data categorical\n# 5:                ICD-9-CM.13       data categorical                 no\n# ---\n# 712: DXCCnoS_secondary_value179       data categorical                 no\n# 713: DXCCnoS_secondary_value181       data categorical                 no\n# 714: DXCCnoS_secondary_value182       data categorical                 no\n# 715: DXCCnoS_secondary_value183       data categorical                 no\n# 716: DXCCnoS_secondary_value184       data categorical                 no\n\n#\n# data_input[data_driven_factors_vec]\n# NA_ratio <- sapply(data_input[,data_driven_factors_vec],function(x) round(mean(is.na(x)),digits=3) )\n#---from above NA_ratio we can decide which column we need to replace NA with say 0.---#\ncatt(\"Start extracting response variables information!\")\nsetkey(factors_all,drivenType)\nresponse_variables <- factors_all[grep(\"response\",drivenType,perl=T,ignore=T),][,colname]\ncatt(\"Start extracting knowledge_driven/data_driven factors information!\")\nknowledge_driven_factors <- factors_all[grep(\"knowledge\",drivenType,perl=T,ignore=T),][,colname]\ndata_driven_factors <-  factors_all[grep(\"data\",drivenType,perl=T,ignore=T),][,colname]\n# id_variables <- factors_all[grep(\"id\",drivenType,perl=T,ignore=T),][,colname]\t# not used in linear model.\n#---trim the leading or \nresponse_variables_vec <- sapply(response_variables,str_trim)\nknowledge_driven_factors_vec <- sapply(knowledge_driven_factors,str_trim)\ndata_driven_factors_vec <- sapply(data_driven_factors,str_trim)\n# id_variables <- sapply(id_variables,str_trim)\n\n##\n### \n#############################################\n#------#\n# check we have all names in the data.\n#\nstopifnot(response_variables_vec %in% colnames(data_input))\nstopifnot(knowledge_driven_factors_vec %in% colnames(data_input))\nstopifnot(data_driven_factors_vec %in% colnames(data_input))\ncatt(\"All extracted variables are validated to exsit in data_input!\")\ncatt(\"We have response_variables are:\",(response_variables_vec) )\ncatt(\"We have knowledge_driven_factors are:\",knowledge_driven_factors_vec)\ncatt(\"We have data_driven_factors are:\",head(data_driven_factors_vec),\"...\" )\n\n#-------#\n# subset the data_input to select only useful columns specified in factors_all.\ndata_input <- data_input[,factors_all$colname,with=F]\n#-------#\n# check dataType of each column, force continuous to be numeric col; categorical keep intact since it doesn't matter.\n# data_input_backup <- data.table::copy(data_input)\t# debugging usage.\n# data_input <- data.table::copy(data_input_backup)\t# debugging usage.\ncolname_continuous_dataType <-factors_all[grep(\"continuous\",dataType,perl=T),colname]\n# > data_input[,colname_continuous_dataType,with=F] %>% sapply(class)\t# check data col obj type.\n# NDX                        NPR\n# \"integer\"                  \"integer\"\n# acutePhysiologyScore                apacheScore\n# \"integer\"                  \"integer\"\n# predictedICUMortality         actualICUMortality\n# \"character\"                \"character\"\n# predictedICULOS               actualICULOS\n# \"character\"                \"character\"\n# predictedHospitalMortality    actualHospitalMortality\n# \"character\"                \"character\"\n# predictedHospitalLOS          actualHospitalLOS\n# \"character\"                \"character\"\n# N_CM                        AGE\n# \"numeric\"                  \"integer\"\n# LOS                     TOTCHG\n# \"integer\"                  \"numeric\"\n\n#---a subfunc to do dataType transformation (to numeric or factor depending on whether user expect it to be 'continuous' or 'categorical'), only take effect when the column is not of the wanted type yet.---\ncontinuousVar_toNumeric <- function(variableName,data = data_input,annotation_table = factors_all) {\n  setkey(annotation_table,colname )\t\n  data_type <- annotation_table[variableName,dataType]\n  if (grepl(\"continuous\",data_type,perl=T) & !(inherits( data_input[[variableName]], c(\"integer\", \"numeric\") )) ) {\n    col_value <- data[,(variableName),with=F] %>>% unlist %>>% as.numeric\n    data[,variableName:=col_value,with=F]\t# iif data type is continuous and the data col is not a in integer or numeric object type, this will make effect.\n  }\n  # ---for categorical we wan to make it to factor type.\n  if (grepl(\"categorical\",data_type,perl=T) & !(inherits( data_input[[variableName]], c(\"integer\", \"factor\",\"numeric\") )) ) {\n    col_value <- data[,(variableName),with=F] %>>% unlist %>>% as.factor\n    data[,variableName:=col_value,with=F]\t# iif data type is continuous and the data col is not a in integer or numeric object type, this will make effect.\n  }\n  \n  return(NULL)\t# doesn't need to return, change in place.\n}\n#---obj type coerce execute---#\n# coerce_temp <- tryCatch.W.E( sapply(colname_continuous_dataType,continuousVar_toNumeric,data = data_input,annotation_table = factors_all) )\t\ncoerce_temp <- tryCatch.W.E( sapply( data_input %>>% colnames,continuousVar_toNumeric,data = data_input,annotation_table = factors_all) )\t\nif ( inherits(coerce_temp$value, \"error\" ) ) stop( sprintf(\"Error occurs at coercing continuous variables in provided data (%s) to be object of type 'numeric' or coercing categorical variable to be object of type 'factor', please clean the data if you haven't done so. Notice: do check the data if each variable(column) is of expected type, e.g. character, integer, numeric, etc. If in character, but you expect a continuous variable, you d better transform it to numeric value by yourself before providing it to this program. You want to also take care of those messy values like 'NULL','NA' in quotes within a character type column!\", input_file) )\ncoerce_temp <- coerce_temp[[\"warning\"]]\t# the trimmed tryCatch warning return.\nif (!is.null(coerce_temp))\n  catt( sprintf(\"Warning occurs at coercing continuous/categorical variables in provided data (%s) to be object of type 'numeric'/'factor': %s\", input_file,as.character(coerce_temp) ) )\n\n\n\n#=================================================================================#\n# if need to keep testing data out\nif (exists(\"seed\") )\n  set.seed(seed)\t# setting starting seed.\nif (exists(\"ProportionHoldingTestDataset\") ) {\n  testDataset_index <- sample.int(nrow(data_input), ProportionHoldingTestDataset *nrow(data_input)  )\t# ProportionHoldingTestDataset is a numeric\n  data_inpu_testing <- data_input[testDataset_index]\t# leave for testing\n  data_input <- data_input[-testDataset_index]\t# leave for training or kFoldCV.\n}\n# now we have data_inpu_testing\n# and\n#\t\t\t  data_input, which can be further splitted for kFoldCV.\n# Note: considering to apply a group-size proportional sampling.\n#\t\te.g. for survival outcome, group on 'died', and sample proportionally.\n# ###\n# ##\n# # for debugging\n# setkeyv(NY_SID_2009_HFdata_refined,\"died\")\n# data_input <- NY_SID_2009_HFdata_refined\n# data_input_testing <- dplyr::sample_frac(NY_SID_2009_HFdata_refined,size=0.3)\n# data_input <- dplyr::setdiff(data_input, data_input_testing)\t# get the left part as new version of data_input.\n# #\n# ##\n# ###\n#=================================================================================#\n# if need to manual kFoldCV, get the kFold_group_index ready, which contains the row index for each fold.\nif (exists(\"kFoldCV\") ) {\n  total_index <- sample.int(nrow(data_input), nrow(data_input)  )\t# already random perturbed index, e.g. 300,21,335,266,100,25...\n  groupID <- length( total_index ) %>>% seq %:>% cut(., breaks = kFoldCV)\n  # > split(total_index,groupID) %>>% unlist %>>% length\n  # [1] 4064\n  # > split(total_index,groupID) %>>% unlist %>>%\n  # > total_index %>>% length\n  # [1] 4064\n  # > split(total_index,groupID) %>>% unlist %>>% anyDuplicated\n  # [1] 0\n  kFold_group_index <- split(total_index,groupID)\n  stopifnot( length(kFold_group_index) == kFoldCV)\n}\n\n\n\n\n#=================================================================================#\n# start load pre-specified model function.\nif (exists(\"PrefeatureSelection_module\") ) {\n  featureSelection_module_loaded <- source(sprintf(\"%s/Module_file/%s.r\",programRootPWD,PrefeatureSelection_module) )\n  pre_feature_selection <- T\t# the flag indicate whether we will do pre_feature_selection step before going to predictive_module step.\n} else pre_feature_selection <- F\n# start load pre-specified model function.\npredictive_module_loaded <- source(sprintf(\"%s/Module_file/%s.r\",programRootPWD,Predictive_module))\n#\n#\n#--------------------------#\n# filter on NA ratio > 0.05\nNA_ratio <- sapply(data_input[,data_driven_factors_vec,with=F],function(x) round(mean(is.na(x)),digits=3) )\n# NA_ratio\n# 0 0.001 0.018 0.019\n# 455     1     1     1\nfeatureN_before_temp <- length(data_driven_factors_vec)\ncatt(\"Dropping data_driven_factors which have NA_ratio > 15%!\")\n# data_driven_factors_vec <- data_driven_factors_vec[NA_ratio <= 0.05]\t# a further examine to guarantee NA ratio not too big.\ndata_driven_factors_vec <- data_driven_factors_vec[NA_ratio <= 0.15]\t# a further examine to guarantee NA ratio not too big.\nfeatureN_after_temp <- length(data_driven_factors_vec)\ncatt(\"Number of data_driven_factors before NA_ratio pruning:\", featureN_before_temp)\ncatt(\"Number of data_driven_factors after NA_ratio pruning:\", featureN_after_temp)\n\n# programRootPWD <-  getwd() \t# for backup.\n# invisible( ifelse(exists(\"output_folder_name\"), yes = {dir.create(output_folder_name);setwd(output_folder_name)}, no = setwd(\"Output_file\") ) )\t# dont print the pwd which is the default behaviour of setwd.\n#=================================1, pre feature selection============================#\nif (pre_feature_selection) {\t# need do pre_feature_selection step.\n  catt(\"Now running PrefeatureSelection_module:\",PrefeatureSelection_module)\n  if (exists(\"Pf_m_config_file\")) {\t\n    # featureSelection_call <- call(PrefeatureSelection_module,data = data_input, response_variables = response_variables_vec,    knowledge_driven_factors = knowledge_driven_factors_vec,data_driven_factors = data_driven_factors_vec, pvalue_cutoff = 0.05)\n    tC_temp <- tryCatch.W.E(calls_pf_m <- extract_model_fromModelFile(sprintf(\"%s/Model_file/%s\",programRootPWD,Pf_m_config_file)) )\t# absolute path used here.\n    if ( inherits(tC_temp$value, \"error\" ) ) stop(\"Error occurs at extract model from model file step, please check model_file syntax/path.\")\n    tC_temp <- tC_temp[[\"warning\"]]\t# the trimmed tryCatch warning return.\n    if (!is.null(tC_temp))\n      catt(\"Warning at extract model from model file step: \", as.character(tC_temp) )\n    # raw calls may have typo, need to match.call in each real function.\n    # predictiveModel_call <- call(predictive_module,data = data_input,response_variables = response_variables_vec, knowledge_driven_factors = knowledge_driven_factors_vec, data_driven_factors = data_driven_factors_vec, factors_annotation_table = factors_all)\n    calls_pf_m_env <- list2env(calls_pf_m)\t# transform to a environment for backup and further call. environment will save it against damage.\n    #---#\n    module_index <- match(sprintf(\":%s\",PrefeatureSelection_module), names(calls_pf_m) )\t# hard match\n    pre_feature_selectionResult <- eval(calls_pf_m[[module_index]][[1]])\n  } else {\t\n    calls_pf_m <- NULL\t# for compatiblity in further module.\n    featureSelection_call <- call(PrefeatureSelection_module)\t# use default argument values setup in function definition.\n    # uniCorr()\n    \n    pre_feature_selectionResult <- eval(featureSelection_call)\n    \n    # DXCCS_secondary_value5\n    # 0     1\n    # 63934   646\n    # but in linear model, it is further filtered for NAs in other variables, so eventually becomes all 0.\n  }\n  data_driven_factors_vec <- pre_feature_selectionResult$features\t# update the data_driven_factors_vec with fewer candidates passing this step.\n  # catt(\"We have \", length(data_driven_factors_vec), \" data-driven variables left after 'pre-feature selection' module\")\n  save(pre_feature_selectionResult,file=sprintf(\"%s_pre_feature_selectionResult_by_%s.Rdata\",prefix,PrefeatureSelection_module) )\n  catt(\"Number of data_driven_factors after pre_feature_selection:\", length(data_driven_factors_vec))\n}\n\n\n#================================2, predictive model====================================#\n# Browse[2]> data[,sapply(.SD,function(x)sum(is.na(x))),.SDcols=c(knowledge_driven_factors_vec,data_driven_factors_vec)] %>>% table\n\n# 0   69  223 1139 1198\n# 457    1    1    1    1\n# originalN <- nrow(data_input)\n#---#\n# extract the calls from corresponding model file for predictive model.\ncatt(\"Now running Predictive_module:\",Predictive_module)\nif (exists(\"p_m_config_file\")) {\n  tC_temp <- tryCatch.W.E(calls_pm <- extract_model_fromModelFile(sprintf(\"%s/Model_file/%s\",programRootPWD,p_m_config_file)) )\t\n  if ( inherits(tC_temp$value, \"error\" ) ) stop(\"Error occurs at extract model from model file step, please check model_file syntax/path.\")\n  #\n  tC_temp <- tC_temp[[\"warning\"]]\t# the trimmed tryCatch warning return.\n  if (!is.null(tC_temp))\n    catt(\"Warning at 'extract_model_fromModelFile' to 'calls_pm' step: \", as.character(tC_temp) )\n  # raw calls may have typo, need to match.call in each real function.\n  # predictiveModel_call <- call(Predictive_module,data = data_input,response_variables = response_variables_vec, knowledge_driven_factors = knowledge_driven_factors_vec, data_driven_factors = data_driven_factors_vec, factors_annotation_table = factors_all)\n  calls_pm_env <- list2env(calls_pm)\t# transform to a environment for backup and further call. environment will save it against damage.\n  #---#\n  module_index <- match(sprintf(\":%s\",Predictive_module), names(calls_pm) )\t# hard match\n  predictiveResult <- eval(calls_pm[[module_index]][[1]])\n} else {\n  calls_pm <- NULL\t# for compatiblity in further module.\n  predictiveModel_call <- call(Predictive_module)\n  predictiveResult <- eval(predictiveModel_call)\t# use default function definition setup.\n  # not recommended.\n  # recomend use p_m_config_file\n}\nsave(predictiveResult,file=sprintf(\"%s_predictiveResult_by_%s.Rdata\",prefix,Predictive_module) )\n\n\n#==================================================================================#\n# space for testing model performance on hold out data_inpu_testing\n# each predictive_module need a corresponding evaluate_predict_module.\n# \n#==================================================================================#\n\n\nmessage(\"========================================================\" );\ncatt(\"Finished!\" )\ncatt(\"End at \", date() )\ncatt(\"Please check log file under program root and all result outputs in\", outputPWD )\n#---------------#\n# end parallel_scheme\nif (exists(\"cl\")) stopCluster(cl)\t# only cl need to be stopped.\nif (exists(\"sc\")) sparkR.stop() # stop Spark cluster if any.\n#---------------#\n# end logging system.\nsink()\nsink(type=\"message\")\nclose(log_connection)\n",
    "created" : 1444847262090.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "777436852",
    "id" : "D5BDDC28",
    "lastKnownWriteTime" : 1444857596,
    "path" : "/home/ec2-user/PhilipsHealthcareBDS/PhilipsHealthcareBDS/ModelComputation_main_SparkR_version.r",
    "project_path" : "ModelComputation_main_SparkR_version.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}